{"version":3,"sources":["resources/battleship_background.jpg","components/Hero.js","components/Header.js","components/Footer.js","components/shipFactory.js","components/admirals.js","components/GameLogic.js","components/Cell.js","components/Row.js","components/Grid.js","components/placeCompShips.js","components/ShipSelector.js","components/GameBoard.js","components/gameboardFactory.js","components/InfoPanel.js","components/CompAI.js","components/PlayingArea.js","App.js","index.js"],"names":["Hero","className","src","battleship_background","alt","to","Header","props","onClick","Footer","href","target","rel","shipFactory","shipName","shipLength","name","length","hitArray","createHitArray","checkNumOfHits","reduce","accumulator","currentValue","Array","map","i","sunk","resetShip","this","hit","index","admirals","admiral","GameLogic","getCoordinates","e","cell","closest","x","Number","attributes","value","y","getCell","document","querySelectorAll","displayCellClickResult","responseObj","ships","firstElementChild","result","hitIndex","querySelector","classList","remove","parentElement","add","ship","console","log","getAdmiral","randNum","Math","floor","random","displayShipPreview","startCoord","shipObj","orientation","board","gameboard","xCoord","yCoord","messageDefault","message","validShipPlacement","checkForValidShipPlacement","validPlacement","displayPlayerShip","array","forEach","clickCompCell","coordinates","checkForHit","checkHit","removeShipFromSelector","selector","shipArr","options","shipIndex","findIndex","createShips","carrier","battleship","cruiser","submarine","destroyer","checkIfAllShipsSunk","shipsArr","Object","getOwnPropertyNames","sunkStatusArr","push","filter","status","updateInfoPanel","infoPanel","Cell","gameLogic","agent","gameState","data-row","row","data-column","column","data-agent","getElementById","attemptShipPlacement","placeShip","updateGameState","updateMessage","updateGame","compName","whenCellClicked","onMouseOver","contains","onHover","onMouseOut","offHover","symbol","label","Row","columnIndex","gridSize","Grid","rowIndex","grid","placeCompShips","ShipSelector","id","GameBoard","displayName","shipSelector","gameboardFactory","test","updatedCellsArr","InfoPanel","displayMessage","compAI","playerBoard","playerShips","lastTurn","updateLastTurn","turn","mode","directionArray","rand","max","coords","direction","setDirection","resultsArray","newCoords","updateCoords","checkForValidMove","flipDirection","getCoords","clickResult","dir","handleCorners","handleEdges","numOfMisses","numOfHits","updateTurn","PlayingArea","useState","setGameState","setPlayerBoard","setPlayerShips","compBoard","setCompBoard","compShips","setCompShips","compLastTurn","setCompLastTurn","setMessage","updateCompLastTurn","turnInfo","setTimeout","resultMessage","compTurnResult","endGame","runCompTurn","resetGame","App","game","basename","path","exact","render","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.648a4eca.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/battleship_background.506e93d5.jpg\";","import {Link} from \"react-router-dom\";\nimport battleship_background from '../resources/battleship_background.jpg'\n\nconst Hero = () => {\n\n    return (\n        <div className=\"hero\">\n            <header>\n                <h1 className=\"logo\">Battleship</h1>\n            </header>\n\n            <img className=\"background\" src={battleship_background} alt=\"\"></img>\n\n            <div className=\"text\">\n                <h2>Control the seas</h2>\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>\n                <Link to=\"/play\">\n                    <button>Play now</button>\n                </Link>\n            </div>\n        </div>\n    )\n\n}\n\nexport default Hero","import {Link} from \"react-router-dom\";\nimport battleship_background from '../resources/battleship_background.jpg'\n\nconst Header = (props) => {\n    const refresh = () => {\n        // window.location.reload()\n    }\n\n    return (\n        <header className=\"header\">\n            <div className=\"header-text\">\n                <Link to=\"/\">\n                    <h1 className=\"header-link\">Battleship</h1>\n                </Link>\n                \n                <Link to=\"/\">\n                        <button className=\"newGameBtn\" onClick={refresh}>New game</button>\n                </Link>\n            </div>\n            <img className=\"background\" src={battleship_background} alt=\"\"></img>\n        </header>\n    )\n}\n\nexport default Header","const Footer = () => {\n    return (\n        <div className=\"footer\">\n            <span>Built by Owen Kraft.&ensp;</span>\n            <a href=\"https://forms.gle/U9p64oQHRci6q6rr5\" target=\"_blank\" rel=\"noreferrer\"> Report a bug here.</a>\n        </div>\n    )\n}\n\nexport default Footer","const shipFactory = (shipName, shipLength) => {\n    const name = shipName\n    const length = shipLength\n    let sunk = false\n    let hitArray = createHitArray(length)\n\n    function checkNumOfHits(){\n        return hitArray.reduce((accumulator,currentValue) => accumulator + currentValue,0)\n    }\n\n    function resetShip(){\n        this.sunk = false\n        this.hitArray = createHitArray(length)\n    }\n\n    function hit(index){\n        hitArray[index] = 1\n\n        if(checkNumOfHits() === hitArray.length && this.sunk === false){\n            this.sunk = true\n        }\n    }\n    \n    function createHitArray(length) {\n        return [...new Array(length)].map(i => i = 0)\n    }\n\n    return {name, length, sunk, hitArray, resetShip, hit, checkNumOfHits}\n}\n\nexport default shipFactory","const admirals = [\n    {admiral: \"Horatio Nelson\"},\n    {admiral: \"Grigori Potemkin\"},\n    {admiral: \"Tōgō Heihachirō\"},\n    {admiral: \"Hayreddin Barbarossa\"},\n    {admiral: \"Francis Drake\"},\n    {admiral: \"Chester Nimitz\"},\n    {admiral: \"Yi Sun-sin\"}\n]\n\nexport default admirals","// import React, {useState, useEffect} from 'react'\n// import gameboardFactory from './gameboardFactory'\nimport shipFactory from './shipFactory'\nimport admirals from './admirals.js'\n\nconst GameLogic = (props) => {\n\n    function getAdmiral(){\n        const randNum = Math.floor(Math.random() * Math.floor(admirals.length))\n        return admirals[randNum].admiral\n    }\n\n    function displayShipPreview(startCoord,shipObj,orientation,board){\n        const shipLength = shipObj.length\n        const gameboard = board.gameboard\n        let xCoord = startCoord.x\n        let yCoord = startCoord.y\n        const messageDefault = \"Click a cell to place ship\"\n        let message = messageDefault\n\n        const validShipPlacement = board.checkForValidShipPlacement(xCoord,yCoord,shipLength,orientation)\n\n        if(validShipPlacement.validPlacement !== false){\n            if(orientation === \"vertical\"){\n                for(let y = yCoord; y < yCoord + shipLength; y++){\n                    message = messageDefault\n                    const cell = getCell(xCoord,y)\n                    cell.classList.add(\"placeShip\")\n                }\n            } else if (orientation === \"horizontal\"){\n                for(let x = xCoord; x < xCoord + shipLength; x++){\n                    message = messageDefault\n                    const cell = getCell(x,yCoord)\n                    cell.classList.add(\"placeShip\")\n                }\n            }\n        } else if(validShipPlacement.validPlacement === false){\n            if(orientation === \"vertical\"){\n                if(yCoord + shipLength > gameboard[0].length){\n                    for(let y = yCoord; y < gameboard[0].length; y++){\n                        message = \"invalid placement! ship length extends past gameboard\"\n                        const cell = getCell(xCoord,y)\n                        cell.classList.add(\"placeShip-invalid\")\n                    }\n                } else {\n                    for(let y = yCoord; y < yCoord + shipLength; y++){\n                        message = \"invalid placement! one or more coordinates already occupied\"\n                        const cell = getCell(xCoord,y)\n                        cell.classList.add(\"placeShip-invalid\")\n                    }\n                }\n            } else if(orientation === \"horizontal\"){\n                if(xCoord + shipLength > gameboard[0].length){\n                    for(let x = xCoord; x < gameboard[0].length; x++){\n                        message = messageDefault\n                        const cell = getCell(x,yCoord)\n                        cell.classList.add(\"placeShip-invalid\")\n                    }\n                } else {\n                    for(let x = xCoord; x < xCoord + shipLength; x++){\n                        message = \"invalid placement! one or more coordinates already occupied\"\n                        const cell = getCell(x,yCoord)\n                        cell.classList.add(\"placeShip-invalid\")\n                    }\n                }\n            }\n        } else {\n            message = \"invalid orientation! orientation must be either 'horizontal' or 'vertical'\"\n        }\n\n        return message\n    }\n\n    function displayPlayerShip(array){\n        array.forEach(i => {\n                const cell = getCell(i[0],i[1])\n                cell.classList.add(\"playerShip\")\n            }\n        )\n    }\n\n    function clickCompCell(cell,board,ships){\n        const coordinates = getCoordinates(cell)\n        const checkForHit = board.checkHit(coordinates.x,coordinates.y)\n        const result = displayCellClickResult(coordinates.cell,checkForHit,ships)\n        \n        return result\n    }\n\n    function removeShipFromSelector(shipName,selector){\n        let shipArr = []\n        for (let i=0; i < selector.options.length; i++){\n            shipArr[i] = selector.options[i].value\n        }\n\n        const shipIndex = shipArr.findIndex(i => i === shipName)\n        selector.remove(shipIndex)\n\n        if(selector.options.length === 0){\n            document.querySelector(\".ship-selector\").classList.add(\"hidden\")\n        }\n    }\n\n    function getCoordinates(e){\n        const cell = e.target.closest(\".cell\")\n        const x = Number(cell.attributes[1].value)\n        const y = Number(cell.attributes[2].value)\n\n        return {cell,x,y}\n    }\n\n    function getCell(x,y){\n        const xCoord = document.querySelectorAll(`[data-agent=\"player\"][data-row=\"${x}\"]`)\n        const cell = xCoord[y]\n        return cell\n    }\n\n    function displayCellClickResult(e,responseObj,ships){\n        const cell = e.firstElementChild\n        const result = responseObj[0]\n        const shipName = responseObj[2]\n        const hitIndex = responseObj[3]\n\n        if(result === false){\n            cell.querySelector(\".miss-icon\").classList.remove(\"hidden\")\n            cell.parentElement.classList.add(\"miss\")\n        } else if (result === true){\n            cell.querySelector(\".hit-icon\").classList.remove(\"hidden\")\n            cell.parentElement.classList.add(\"hit\")\n            const ship = ships[shipName]\n            ship.hit(hitIndex)\n            console.log(\"ship sunk?\", ship.sunk)\n        }\n        \n        return result\n    }\n\n    function createShips(){\n        const carrier = shipFactory(\"carrier\",5)\n        const battleship = shipFactory(\"battleship\",4)\n        const cruiser = shipFactory(\"cruiser\",3)\n        const submarine = shipFactory(\"submarine\",3)\n        const destroyer = shipFactory(\"destroyer\",2)\n\n        return {carrier,battleship,cruiser,submarine,destroyer}\n    }\n\n    function checkIfAllShipsSunk(ships){\n        const shipsArr = Object.getOwnPropertyNames(ships)\n        let sunkStatusArr = []\n\n        shipsArr.forEach(ship => {\n            sunkStatusArr.push(ships[ship].sunk)\n        })\n\n        const filteredArr = sunkStatusArr.filter(status => status === true)\n\n        if(filteredArr.length === shipsArr.length){\n            return true\n        } else {\n            return false\n        }\n    }\n\n    function updateInfoPanel(status){\n        const infoPanel = document.querySelector(\".info-panel\")\n        infoPanelCleanUp()\n\n        if(status === \"success\"){\n            infoPanel.classList.add(\"info-panel-success\")\n        } else if(status === \"warning\"){\n            infoPanel.classList.add(\"info-panel-warning\")\n        } else if(status === \"danger\"){\n            infoPanel.classList.add(\"info-panel-danger\")\n        }\n\n        function infoPanelCleanUp(){\n            infoPanel.classList.remove(\"info-panel-success\")\n            infoPanel.classList.remove(\"info-panel-warning\")\n            infoPanel.classList.remove(\"info-panel-danger\")\n        }\n    }\n\n    return {\n        getAdmiral,\n        displayShipPreview,\n        displayPlayerShip,\n        clickCompCell,\n        removeShipFromSelector,\n        createShips,\n        getCoordinates,\n        getCell,\n        checkIfAllShipsSunk,\n        displayCellClickResult,\n        updateInfoPanel\n    }\n}\n\nexport default GameLogic","import React from 'react';\nimport Emoji from 'a11y-react-emoji';\nimport GameLogic from './GameLogic'\n\nconst Cell = (props) => {\n    const gameLogic = GameLogic()\n    const agent = props.agent\n    const board = props.board\n    const ships = props.ships\n    const gameState = props.gameState\n\n\n    const whenCellClicked = (e) => {\n        let ship = ships[document.getElementById(\"ship-dropdown\").value]\n        let orientation = document.getElementById(\"orientation-dropdown\").value\n        if(agent === \"player\" && gameState === \"setup\"){\n            const coordinates = gameLogic.getCoordinates(e)\n            const attemptShipPlacement = board.placeShip(ship,[coordinates.x,coordinates.y],orientation)\n            gameLogic.displayPlayerShip(attemptShipPlacement)\n            if(attemptShipPlacement.length !== 0){\n                const selector = document.getElementById(\"ship-dropdown\")\n                gameLogic.removeShipFromSelector(ship.name,selector)\n                if(!selector.options.length){\n                    props.updateGameState(\"player turn\")\n                    gameLogic.updateInfoPanel(\"success\")\n                    props.updateMessage(\"Your fleet has been positioned. Make the first attack!\")\n                }\n            }\n        } else if(agent === \"computer\" && gameState === \"player turn\"){\n            const clickCompCell = gameLogic.clickCompCell(e,board,ships)\n            if(clickCompCell === \"already clicked\"){\n                document.querySelector(\".info-panel\").classList.add(\"info-panel-warning\")\n                props.updateMessage(\"Try another square.\")\n            } else {\n                props.updateGame(board,ships)\n                const checkIfAllShipsSunk = gameLogic.checkIfAllShipsSunk(ships)\n                if(checkIfAllShipsSunk === true){\n                    props.updateGameState(\"game over\")\n                    gameLogic.updateInfoPanel(\"success\")\n                    props.updateMessage(`You won! To play again, click 'New Game' in the upper right hand corner.`)\n                } else {\n                    let result\n                    if(clickCompCell === false){\n                        result = \"Miss! \"\n                        gameLogic.updateInfoPanel()\n                    } else if(clickCompCell === true){\n                        result = \"Hit! \"\n                        gameLogic.updateInfoPanel(\"success\")\n                    }\n                    props.updateMessage(result + props.compName + \" is thinking...\")\n                    props.updateGameState(\"comp turn\")\n                }\n            }\n        } else if(agent === \"computer\" && gameState === \"setup\"){\n        } \n    }\n\n    const onHover = (e) => {\n        if(agent === \"player\" && gameState === \"setup\"){\n            let ship = ships[document.getElementById(\"ship-dropdown\").value]\n            let orientation = document.getElementById(\"orientation-dropdown\").value\n\n            const coordinates = gameLogic.getCoordinates(e)\n            gameLogic.displayShipPreview(coordinates,ship,orientation,board)\n        } else if(agent === \"computer\" && gameState === \"setup\"){\n            e.target.classList.add(\"invalid\")\n        } else if(agent === \"computer\" && (gameState !== \"setup\" && gameState !== \"game over\")){\n            if(e.target.closest(\".cell\").classList.contains(\"hit\") || e.target.closest(\".cell\").classList.contains(\"miss\")){\n                e.target.closest(\".cell\").classList.add(\"invalid\")\n            } else if(!e.target.closest(\".cell\").classList.contains(\"hit\") || !e.target.closest(\".cell\").classList.contains(\"miss\")){\n                e.target.closest(\".cell\").classList.add(\"valid\")\n            }\n        }\n    }\n\n    const offHover = (e) => {\n        if(props.agent === \"player\" && gameState === \"setup\"){\n            const cells = document.querySelectorAll(\".placeShip, .placeShip-invalid\")\n            cells.forEach(i => i.classList.remove(\"placeShip\",\"placeShip-invalid\"))\n        } else if(agent === \"computer\" && gameState === \"setup\"){\n            e.target.classList.remove(\"invalid\")\n        } else if(agent === \"computer\" && (gameState !== \"setup\" && gameState !== \"game over\")){\n            e.target.closest(\".cell\").classList.remove(\"valid\")\n            e.target.closest(\".cell\").classList.remove(\"invalid\")\n        }\n    }\n\n\n    return (\n        <div className={`cell ${props.agent}`} data-row={props.row} data-column={props.column} data-agent={props.agent} onClick={(e) => whenCellClicked(e)} onMouseOver={(e) => onHover(e)} onMouseOut={(e) => offHover(e)}>\n            <div>\n                <Emoji symbol=\"🔥\" label=\"hit\" className=\"emoji hit-icon hidden\"/>\n                <Emoji symbol=\"✖️\" label=\"miss\" className=\"emoji miss-icon hidden\"/>\n            </div>\n        </div>\n    )\n}\n\nexport default Cell","import React from 'react';\nimport Cell from './Cell';\n\nconst Row = (props) => {\n    const gridSize = 8\n    let columnIndex = -1\n\n    const row = [...new Array(props.gridSize || gridSize)]\n    .map(i => i = <Cell \n            key = {columnIndex}\n            row={props.row}\n            column={columnIndex += 1}\n            agent={props.agent}\n            board={props.board}\n            ships={props.ships}\n            compName = {props.compName}\n            gameState = {props.gameState}\n            updateGame = {props.updateGame}\n            updateGameState = {props.updateGameState}\n            updateMessage = {props.updateMessage}\n            whenCellClicked={props.whenCellClicked}\n        />\n    )\n\n    return (\n        <div className=\"row\">\n            {row}\n        </div>\n    )\n}\n\nexport default Row","import React from 'react';\nimport Row from './Row';\n\nconst Grid = (props) => {\n    const gridSize = 8\n    let rowIndex = -1\n\n    const grid = [...new Array(props.gridSize || gridSize)]\n    .map(i => i = <Row \n            key = {rowIndex}\n            gridSize={props.gridSize}\n            row={rowIndex += 1}\n            agent={props.agent}\n            board={props.board}\n            ships={props.ships}\n            compName = {props.compName}\n            gameState = {props.gameState}\n            updateGame = {props.updateGame}\n            updateGameState = {props.updateGameState}\n            updateMessage = {props.updateMessage}\n            whenCellClicked={props.whenCellClicked}\n        />\n    )\n\n    return (\n        <div className=\"grid\">\n            {grid}\n        </div>\n    )\n}\n\nexport default Grid","const placeCompShips = (board,ships) => {\n    // place carrier\n    board.placeShip(ships.carrier,[1,1],\"horizontal\")\n    //place battleship\n    board.placeShip(ships.battleship,[6,3],\"vertical\")\n    //place cruiser\n    board.placeShip(ships.cruiser,[2,3],\"horizontal\")\n    // place submarine\n    board.placeShip(ships.submarine,[1,5],\"vertical\")\n    // place destroyer\n    board.placeShip(ships.destroyer,[6,0],\"horizontal\")\n}\n\nexport default placeCompShips","const ShipSelector = () => {\n    return (\n        <div className=\"ship-selector\">\n          <h3 className=\"ship-selector-text\">Change ship or orientation</h3>\n          <div>\n            <select id=\"ship-dropdown\">\n              <option value=\"carrier\">Carrier</option>\n              <option value=\"battleship\">Battleship</option>\n              <option value=\"cruiser\">Cruiser</option>\n              <option value=\"submarine\">Submarine</option>\n              <option value=\"destroyer\">Destroyer</option>\n            </select>\n            <select id=\"orientation-dropdown\">\n              <option value=\"vertical\">Vertical</option>\n              <option value=\"horizontal\">Horizontal</option>\n            </select>\n          </div>\n        </div>\n    )\n}\n\nexport default ShipSelector","import React from 'react'\nimport Grid from './Grid'\nimport GameLogic from './GameLogic'\nimport placeCompShips from './placeCompShips'\nimport ShipSelector from './ShipSelector'\n\nconst GameBoard = (props) => {\n    const gameLogic = GameLogic()\n    let displayName\n    let shipSelector\n\n    if(props.agent === \"computer\"){\n        placeCompShips(props.board,props.ships)\n        displayName = props.compName + \"'s\"\n    } else {\n        displayName = \"Your\"\n        shipSelector = <ShipSelector />\n    }\n\n    return (\n        <div className=\"gameboard\">\n            <h2>{displayName} board</h2>\n            <Grid \n                gridSize={8}\n                agent={props.agent}\n                board={props.board}\n                ships={props.ships}\n                compName = {props.compName}\n                gameState = {props.gameState}\n                updateGame = {props.updateGame}\n                updateGameState = {props.updateGameState}\n                updateMessage = {props.updateMessage}\n                whenCellClicked={gameLogic.whenCellClicked}\n            />\n            {shipSelector}\n        </div>\n    )\n}\n\nexport default GameBoard","const gameboardFactory = () => {\n    const test = () => {\n        console.log(\"this is a test\",gameboard)\n    }\n\n    // creates array with 8 items(= i), then inserts another 8 item array in each item\n    const gameboard = [...new Array(8)].map(i => i = [...new Array(8)].map(i => i = [\"empty\"]))\n\n    function placeShip(shipObj,startCoord,orientation){\n        const name = shipObj.name\n        const length = shipObj.length\n        let xCoord = startCoord[0]\n        let yCoord = startCoord[1]\n        let shipIndex = 0\n        let updatedCellsArr = []\n\n        const validShipPlacement = checkForValidShipPlacement(xCoord,yCoord,length,orientation)\n\n        if(validShipPlacement.validPlacement !== false){\n            if(orientation === \"vertical\"){\n                for(let y = yCoord; y < yCoord + length; y++){\n                    gameboard[xCoord][y] = [\"ship\",name,shipIndex]\n                    updatedCellsArr.push([xCoord,y])\n                    shipIndex++\n                }\n            } else if (orientation === \"horizontal\"){\n                for(let x = xCoord; x < xCoord + length; x++){\n                    gameboard[x][yCoord] = [\"ship\",name,shipIndex]\n                    updatedCellsArr.push([x,yCoord])\n                    shipIndex++\n                }\n            }\n        }\n\n        return updatedCellsArr\n    }\n\n    function checkForValidShipPlacement(xCoord,yCoord,shipLength,orientation){\n        let validPlacement\n        let message\n\n        if(orientation === \"vertical\"){\n            if(yCoord + shipLength > gameboard[0].length){\n                validPlacement = false\n                message = \"invalid placement! ship length extends past gameboard\"\n            } else {\n                for(let y = yCoord; y < yCoord + shipLength; y++){\n                    if(gameboard[xCoord][y][0] !== \"empty\"){\n                        validPlacement = false\n                        message = \"invalid placement! one or more coordinates already occupied\"\n                    }\n                }\n            }\n        } else if (orientation === \"horizontal\"){\n            if(xCoord + shipLength > gameboard.length){\n                validPlacement = false\n                message = \"invalid placement! ship length extends past gameboard\"\n            } else {\n                for(let x = xCoord; x < xCoord + shipLength; x++){\n                    if(gameboard[x][yCoord][0] !== \"empty\"){\n                        validPlacement = false\n                        message = \"invalid placement! one or more coordinates already occupied\"\n                    }\n                }\n            }\n        } else {\n            validPlacement = false\n            message = \"invalid orientation! orientation must be either 'horizontal' or 'vertical'\"\n        }\n\n        return {validPlacement,message}\n    }\n\n    function checkHit(x,y){\n        const row = gameboard[x]\n\n        if(row[y][0] !== \"empty\" && row[y][0] !== \"ship\"){\n            return [\"already clicked\"]\n        } else if(row[y][0] === \"empty\") {\n            row[y][0] = \"miss\"\n            return [false,\"miss\"]\n        } else if (row[y][0] === \"ship\"){\n            row[y][0] = \"hit\"\n            return [true,\"hit\",row[y][1],row[y][2]]\n        }\n    }\n\n    return {test, gameboard, checkForValidShipPlacement, placeShip, checkHit}\n}\n\nexport default gameboardFactory","import React from 'react'\n\nconst InfoPanel = (props) => {\n    const displayMessage = props.message\n\n    return (\n        <div className=\"info-panel\">\n            {displayMessage}\n        </div>\n    )\n\n}\n\nexport default InfoPanel","\nimport GameLogic from './GameLogic'\n\nconst compAI = (playerBoard,playerShips,lastTurn,updateLastTurn) => {\n    const turn = lastTurn\n    const mode = turn.mode\n    console.log(mode)\n\n    const gameboard = playerBoard.gameboard\n    const gameLogic = GameLogic()\n    const directionArray = [\"up\",\"down\",\"left\",\"right\"]\n    const rand = (max) => {return Math.floor(Math.random() * Math.floor(max))}\n    const coords = getCoords(mode,turn)\n    const x = coords.x\n    const y = coords.y\n    const direction = coords.direction\n\n    const cell = gameLogic.getCell(x,y)\n    const checkForHit = playerBoard.checkHit(x,y)\n    const clickResult = gameLogic.displayCellClickResult(cell,checkForHit,playerShips)\n\n    updateLastTurn(updateTurn(turn))\n    \n    function getCoords(mode,turn){\n        let x\n        let y\n        let direction\n\n        if(mode === \"random\"){\n            x = rand(gameboard.length)\n            y = rand(gameboard[x].length)\n            \n            while(gameboard[x][y][0] === \"miss\" || gameboard[x][y][0] === \"hit\"){\n                x = rand(gameboard.length)\n                y = rand(gameboard[x].length)\n            }\n        } else if(mode === \"hit\"){\n            if(turn.direction === null){\n                do {\n                    direction = setDirection(turn.resultsArray[0].coords).direction\n                    let newCoords = updateCoords(turn.resultsArray[0].coords,direction)\n                    x = newCoords.x\n                    y = newCoords.y\n                } while(!checkForValidMove([x,y]))\n            } else if(turn.resultsArray[turn.resultsArray.length-1].result === \"hit\"){\n                direction = turn.direction\n                let newCoords = updateCoords(turn.resultsArray[turn.resultsArray.length-1].coords,direction)\n                x = newCoords.x\n                y = newCoords.y\n\n                if(!checkForValidMove([x,y])){\n                    direction = flipDirection(turn.direction)\n                    newCoords = updateCoords(turn.resultsArray[0].coords,direction)\n                    x = newCoords.x\n                    y = newCoords.y\n\n                    if(!checkForValidMove([x,y])){\n                        direction = null\n                        x = rand(gameboard.length)\n                        y = rand(gameboard[x].length)\n                        \n                        while(gameboard[x][y][0] === \"miss\" || gameboard[x][y][0] === \"hit\"){\n                            x = rand(gameboard.length)\n                            y = rand(gameboard[x].length)\n                        }\n                    }\n                }\n            } else if(turn.resultsArray[turn.resultsArray.length-1].result === \"miss\"){\n                let newCoords\n\n                const numOfHits = turn.resultsArray.filter(i => i.result === \"hit\")\n                if(numOfHits.length === 1 && turn.resultsArray.length < 5){\n                    do {\n                        direction = setDirection([x,y])\n                        newCoords = updateCoords(turn.resultsArray[0].coords,direction)\n                        x = newCoords.x\n                        y = newCoords.y\n                    } while(!checkForValidMove([x,y]))\n                } else {\n                    direction = flipDirection(turn.direction)\n                    newCoords = updateCoords(turn.resultsArray[0].coords,direction)\n                    x = newCoords.x\n                    y = newCoords.y\n\n                    if(!checkForValidMove([x,y])){\n                        direction = null\n                        x = rand(gameboard.length)\n                        y = rand(gameboard[x].length)\n                        \n                        while(gameboard[x][y][0] === \"miss\" || gameboard[x][y][0] === \"hit\"){\n                            x = rand(gameboard.length)\n                            y = rand(gameboard[x].length)\n                        }\n                    }\n                }\n            }\n        }\n\n        return {x,y,direction}\n    }\n\n    function updateCoords(coords,dir){\n        let x = coords[0]\n        let y = coords[1]\n\n        if(dir === \"up\"){\n            y = y - 1\n        } else if(dir === \"down\"){\n            y = y + 1\n        } else if(dir === \"left\"){\n            x = x - 1\n        } else if(dir === \"right\"){\n            x = x + 1\n        }\n\n        return {x,y}\n    }\n\n    function updateTurn(lastTurn){\n        let turn = lastTurn\n\n        console.log(\"clickResult = \",clickResult)\n        // checks to see if check for hit returns true, indicating actual hit\n        if(clickResult){\n            // checks to see if there was a last result, or if this is init hit in sequence\n            if(turn.resultsArray === null){\n                turn.resultsArray = [{\n                    result: \"hit\",\n                    coords: [x,y]\n                }]\n                turn.mode = \"hit\"\n            } else {\n                turn.resultsArray.push({\n                    result: \"hit\",\n                    coords: [x,y]\n                })\n                turn.direction = direction\n                if(turn.direction === null){\n                    turn.mode = \"random\"\n                }\n            }\n        // what to do if hits returns as false, aka a miss\n        } else {\n            if(turn.resultsArray !== null){\n                const numOfMisses = turn.resultsArray.filter(i => i.result === \"miss\")\n                const numOfHits = turn.resultsArray.filter(i => i.result === \"hit\")\n                if(numOfMisses.length >= 2 && numOfHits.length > 1){\n                    turn.mode = \"random\"\n                    turn.resultsArray = null\n                    turn.direction = null\n                } else {\n                    turn.resultsArray.push({\n                        result: \"miss\",\n                        coords: [x,y]\n                    })\n                }\n            }\n        }\n\n        console.log(turn)\n        return turn\n    }\n\n    function setDirection(coords){\n        let direction\n\n        if(coords === [0,0] || coords === [0,7] || coords === [7,0] || coords === [7,7]){\n            direction = handleCorners(coords)\n        } else if (coords[0] === 0 || coords[0] === 7 || coords[1] === 0 || coords[1] === 7){\n            direction = handleEdges(coords)\n        } else {\n            direction = directionArray[rand(4)]\n        }\n\n        return {direction}\n    }\n\n    function flipDirection(direction){\n        const dir = direction\n\n        if(dir === \"up\"){\n            return \"down\"\n        } else if(dir === \"down\"){\n            return \"up\"\n        } else if(dir === \"left\"){\n            return \"right\"\n        } else if(dir === \"right\"){\n            return \"left\"\n        }\n    }\n\n    function checkForValidMove(coords){\n        let x = coords[0]\n        let y = coords[1]\n\n        if(gameboard[x][y][0] === \"miss\" || gameboard[x][y][0] === \"hit\"){\n            return false\n        } else if(x >= gameboard.length || y >= gameboard[x].length || x < 0 || y < 0 ){\n            return false\n        } else {\n            return true\n        }\n    }\n\n    function handleCorners(coords){\n        let dir\n\n        if(coords === [0,0]){\n            dir = Math.random() >= 0.5 ? \"right\" : \"down\";\n        } else if (coords === [7,7]){\n            dir = Math.random() >= 0.5 ? \"left\" : \"up\";\n        } else if (coords === [7,0]){\n            dir = Math.random() >= 0.5 ? \"left\" : \"down\";\n        } else if (coords === [7,7]){\n            dir = Math.random() >= 0.5 ? \"right\" : \"up\";\n        }\n\n        return dir\n    }\n\n    function handleEdges(coords){\n        const x = coords[0]\n        const y = coords[1]\n        let dir\n\n        if(x === 0){\n            dir = [\"up\",\"down\",\"right\"][rand(2)]\n        } else if(x === 7){\n            dir = [\"up\",\"down\",\"left\"][rand(2)]\n        } else if(y === 0){\n            dir = [\"left\",\"right\",\"down\"][rand(2)]\n        } else if(y === 7){\n            dir = [\"left\",\"right\",\"up\"][rand(2)]\n        }\n\n        return dir\n    }\n\n    return clickResult\n}\n\nexport default compAI","import React, {useState} from 'react'\nimport Header from './Header'\nimport Footer from './Footer'\nimport GameBoard from './GameBoard'\nimport GameLogic from './GameLogic'\nimport gameboardFactory from './gameboardFactory'\nimport InfoPanel from './InfoPanel'\nimport compAI from './CompAI'\n\nconst PlayingArea = (props) => {\n    const gameLogic = GameLogic()\n    const [gameState,setGameState] = useState(\"setup\")\n\n    const [playerBoard,setPlayerBoard] = useState(gameboardFactory())\n    const [playerShips,setPlayerShips] = useState(gameLogic.createShips())\n\n    const [compName,setCompName] = useState(gameLogic.getAdmiral())\n    const [compBoard,setCompBoard] = useState(gameboardFactory())\n    const [compShips,setCompShips] = useState(gameLogic.createShips())\n    const [compLastTurn,setCompLastTurn] = useState({\n        mode: \"random\",\n        resultsArray: null,\n        direction: null,\n    })\n\n    const [message,setMessage] = useState(\"Place your fleet on your board!\")\n\n    const updateCompLastTurn = (turnInfo) => {\n        setCompLastTurn(turnInfo)\n    }\n\n    const updateGameState = (gameState) => {\n        setGameState(gameState)\n        if(gameState === \"comp turn\"){\n            runCompTurn()\n            // if(gameLogic.checkIfAllShipsSunk(playerShips)){\n            //     endGame()\n            //     setMessage(\"Oh no! Your enemy has sunk all of your ships! To play again, click 'New Game' in the upper right hand corner.\")\n            //     gameLogic.updateInfoPanel(\"danger\")\n            // } else {\n            //     setGameState(\"player turn\")\n            // }\n        } else if(gameState === \"game over\"){\n            endGame()\n        }\n    }\n\n    const updateMessage = (message) => {\n        setMessage(message)\n    }\n\n    const updateGame = (agent,board,ships) => {\n        if(agent === \"player\"){\n            setPlayerBoard(board)\n            setPlayerShips(ships)\n        } else if(agent === \"computer\"){\n            setCompBoard(board)\n            setCompShips(ships)\n        }\n    }\n\n    function endGame(){\n        if(gameState !== \"game over\"){\n            setGameState(\"game over\")\n        }\n        const newGameBtn = document.querySelector(\".newGameBtn\")\n        newGameBtn.classList.add(\"btn-inverse\")\n    }\n\n    function runCompTurn(){\n        const rand = Math.floor(Math.random() * Math.floor(2000))\n        setTimeout(() => {\n            const compTurnResult = compAI(playerBoard,playerShips,compLastTurn,updateCompLastTurn)\n            let resultMessage\n            if(compTurnResult === false){\n                resultMessage = \" missed! \"\n                gameLogic.updateInfoPanel()\n            } else if(compTurnResult === true){\n                resultMessage = \" hit your ship! \"\n                gameLogic.updateInfoPanel(\"danger\")\n            }\n            setMessage(compName + resultMessage + \"Your turn.\")\n        },rand)\n\n        if(gameLogic.checkIfAllShipsSunk(playerShips)){\n            endGame()\n            setMessage(\"Oh no! Your enemy has sunk all of your ships! To play again, click 'New Game' in the upper right hand corner.\")\n            gameLogic.updateInfoPanel(\"danger\")\n        } else {\n            setGameState(\"player turn\")\n        }\n    }\n\n    return (\n        <div>\n            <Header \n                resetGame={props.resetGame}\n            />\n            <div className=\"playing-area\">\n                <InfoPanel \n                    message = {message}\n                />\n                <GameBoard\n                    agent = \"player\"\n                    board = {playerBoard}\n                    ships = {playerShips}\n                    gameState = {gameState}\n                    updateGame = {updateGame}\n                    updateGameState = {updateGameState}\n                    updateMessage = {updateMessage}\n                />\n                <GameBoard\n                    agent = \"computer\"\n                    compName = {compName}\n                    board = {compBoard}\n                    ships = {compShips}\n                    gameState = {gameState}\n                    updateGame = {updateGame}\n                    updateGameState = {updateGameState}\n                    updateMessage = {updateMessage}\n                />\n            </div>\n            <Footer />\n        </div>\n    )\n}\n\nexport default PlayingArea","import './App.css';\nimport React, {useState} from 'react';\n// import { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport Hero from './components/Hero'\nimport PlayingArea from './components/PlayingArea';\n\nfunction App() {\n  const [game,resetGame] = useState(false)\n\n  return (\n    <div>\n      <HashRouter basename=\"/battleship\">\n        <Switch>\n          <Route \n            path=\"/\" exact\n            render={(props) => (\n              <Hero />\n            )}\n          />\n          <Route \n            path=\"/start\" exact\n            render={(props) => (\n              <Hero />\n            )}\n          />\n          <Route \n            path=\"/play\"\n            render={(props) => (\n              <PlayingArea\n                game={game}\n                resetGame={resetGame}\n              />\n            )}\n          />\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}