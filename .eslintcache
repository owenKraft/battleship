[{"/Users/owenkraft/the_odin_project/battleship/src/index.js":"1","/Users/owenkraft/the_odin_project/battleship/src/App.js":"2","/Users/owenkraft/the_odin_project/battleship/src/components/Hero.js":"3","/Users/owenkraft/the_odin_project/battleship/src/components/Grid.js":"4","/Users/owenkraft/the_odin_project/battleship/src/components/Cell.js":"5","/Users/owenkraft/the_odin_project/battleship/src/components/Row.js":"6","/Users/owenkraft/the_odin_project/battleship/src/components/gameboardFactory.js":"7","/Users/owenkraft/the_odin_project/battleship/src/components/placeCompShips.js":"8","/Users/owenkraft/the_odin_project/battleship/src/components/GameBoard.js":"9","/Users/owenkraft/the_odin_project/battleship/src/components/createShips.js":"10","/Users/owenkraft/the_odin_project/battleship/src/components/shipFactory.js":"11","/Users/owenkraft/the_odin_project/battleship/src/components/Header.js":"12","/Users/owenkraft/the_odin_project/battleship/src/components/admirals.js":"13","/Users/owenkraft/the_odin_project/battleship/src/components/ShipStatus.js":"14","/Users/owenkraft/the_odin_project/battleship/src/components/GameLogic.js":"15","/Users/owenkraft/the_odin_project/battleship/src/components/PlayingArea.js":"16","/Users/owenkraft/the_odin_project/battleship/src/components/InfoPanel.js":"17","/Users/owenkraft/the_odin_project/battleship/src/components/ShipSelector.js":"18","/Users/owenkraft/the_odin_project/battleship/src/components/CompAI.js":"19"},{"size":219,"mtime":1609538102885,"results":"20","hashOfConfig":"21"},{"size":575,"mtime":1610681457074,"results":"22","hashOfConfig":"21"},{"size":860,"mtime":1610082942034,"results":"23","hashOfConfig":"21"},{"size":810,"mtime":1611415628274,"results":"24","hashOfConfig":"21"},{"size":4842,"mtime":1611508599958,"results":"25","hashOfConfig":"21"},{"size":810,"mtime":1611415633219,"results":"26","hashOfConfig":"21"},{"size":4523,"mtime":1611286678458,"results":"27","hashOfConfig":"21"},{"size":457,"mtime":1610901695804,"results":"28","hashOfConfig":"21"},{"size":1147,"mtime":1611415620705,"results":"29","hashOfConfig":"21"},{"size":398,"mtime":1610297324214,"results":"30","hashOfConfig":"31"},{"size":782,"mtime":1610297486064,"results":"32","hashOfConfig":"21"},{"size":735,"mtime":1611422973666,"results":"33","hashOfConfig":"21"},{"size":282,"mtime":1610317313976,"results":"34","hashOfConfig":"21"},{"size":659,"mtime":1611027801398,"results":"35","hashOfConfig":"31"},{"size":7081,"mtime":1611427709427,"results":"36","hashOfConfig":"21"},{"size":3936,"mtime":1611453871982,"results":"37","hashOfConfig":"21"},{"size":228,"mtime":1610682241724,"results":"38","hashOfConfig":"21"},{"size":781,"mtime":1611421397518,"results":"39","hashOfConfig":"21"},{"size":1860,"mtime":1611453699450,"results":"40","hashOfConfig":"21"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"pv54o5",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"v5o3yc",{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"43"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"43"},"/Users/owenkraft/the_odin_project/battleship/src/index.js",[],["82","83"],"/Users/owenkraft/the_odin_project/battleship/src/App.js",[],"/Users/owenkraft/the_odin_project/battleship/src/components/Hero.js",[],"/Users/owenkraft/the_odin_project/battleship/src/components/Grid.js",[],"/Users/owenkraft/the_odin_project/battleship/src/components/Cell.js",[],"/Users/owenkraft/the_odin_project/battleship/src/components/Row.js",[],"/Users/owenkraft/the_odin_project/battleship/src/components/gameboardFactory.js",[],"/Users/owenkraft/the_odin_project/battleship/src/components/placeCompShips.js",[],"/Users/owenkraft/the_odin_project/battleship/src/components/GameBoard.js",[],"/Users/owenkraft/the_odin_project/battleship/src/components/createShips.js",[],"/Users/owenkraft/the_odin_project/battleship/src/components/shipFactory.js",[],"/Users/owenkraft/the_odin_project/battleship/src/components/Header.js",[],"/Users/owenkraft/the_odin_project/battleship/src/components/admirals.js",[],"/Users/owenkraft/the_odin_project/battleship/src/components/ShipStatus.js",["84","85"],"/Users/owenkraft/the_odin_project/battleship/src/components/GameLogic.js",[],"/Users/owenkraft/the_odin_project/battleship/src/components/PlayingArea.js",["86"],"import React, {useState} from 'react'\nimport Header from './Header'\nimport GameBoard from './GameBoard'\nimport GameLogic from './GameLogic'\nimport gameboardFactory from './gameboardFactory'\nimport InfoPanel from './InfoPanel'\nimport compAI from './CompAI'\n\nconst PlayingArea = (props) => {\n    const gameLogic = GameLogic()\n    const [gameState,setGameState] = useState(\"setup\")\n\n    const [playerBoard,setPlayerBoard] = useState(gameboardFactory())\n    const [playerShips,setPlayerShips] = useState(gameLogic.createShips())\n\n    const [compName,setCompName] = useState(gameLogic.getAdmiral())\n    const [compBoard,setCompBoard] = useState(gameboardFactory())\n    const [compShips,setCompShips] = useState(gameLogic.createShips())\n    const [compLastTurn,setCompLastTurn] = useState({mode: \"random\"})\n\n    const [message,setMessage] = useState(\"Place your fleet on your board!\")\n\n    const updateCompLastTurn = (turnInfo) => {\n        setCompLastTurn(turnInfo)\n    }\n\n    const updateGameState = (gameState) => {\n        setGameState(gameState)\n        if(gameState === \"comp turn\"){\n            // const compTurn = setTimeout(compAI(playerBoard,playerShips,compLastTurn,updateCompLastTurn),3000)\n            const compTurn = runCompTurn()\n            console.log(compTurn)\n            if(gameLogic.checkIfAllShipsSunk(playerShips)){\n                endGame()\n                setMessage(\"Oh no! Your enemy has sunk all of your ships! To play again, click 'New Game' in the upper right hand corner.\")\n            } else {\n                setGameState(\"player turn\")\n                // setMessage(\"Your turn.\")\n            }\n        } else if(gameState === \"game over\"){\n            endGame()\n        }\n    }\n\n    const updateMessage = (message) => {\n        setMessage(message)\n    }\n\n    const updateGame = (agent,board,ships) => {\n        if(agent === \"player\"){\n            setPlayerBoard(board)\n            setPlayerShips(ships)\n        } else if(agent === \"computer\"){\n            setCompBoard(board)\n            setCompShips(ships)\n        }\n    }\n\n    function endGame(){\n        if(gameState !== \"game over\"){\n            setGameState(\"game over\")\n        }\n        const newGameBtn = document.querySelector(\".newGameBtn\")\n        newGameBtn.classList.add(\"btn-inverse\")\n    }\n\n    function runCompTurn(){\n        const rand = Math.floor(Math.random() * Math.floor(2000))\n        setTimeout(() => {\n            const compTurnResult = compAI(playerBoard,playerShips,compLastTurn,updateCompLastTurn)\n            let resultMessage\n            if(compTurnResult === false){\n                resultMessage = \" missed! \"\n                gameLogic.updateInfoPanel()\n            } else if(compTurnResult === true){\n                resultMessage = \" hit your ship! \"\n                gameLogic.updateInfoPanel(\"danger\")\n            }\n            setMessage(compName + resultMessage + \"Your turn.\")\n        },rand)\n    }\n\n    return (\n        <div>\n            <Header />\n            <div className=\"playing-area\">\n                <InfoPanel \n                    message = {message}\n                />\n                <GameBoard\n                    agent = \"player\"\n                    board = {playerBoard}\n                    ships = {playerShips}\n                    gameState = {gameState}\n                    updateGame = {updateGame}\n                    updateGameState = {updateGameState}\n                    updateMessage = {updateMessage}\n                />\n                <GameBoard\n                    agent = \"computer\"\n                    compName = {compName}\n                    board = {compBoard}\n                    ships = {compShips}\n                    gameState = {gameState}\n                    updateGame = {updateGame}\n                    updateGameState = {updateGameState}\n                    updateMessage = {updateMessage}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default PlayingArea","/Users/owenkraft/the_odin_project/battleship/src/components/InfoPanel.js",[],"/Users/owenkraft/the_odin_project/battleship/src/components/ShipSelector.js",[],"/Users/owenkraft/the_odin_project/battleship/src/components/CompAI.js",["87"],"\nimport GameLogic from './GameLogic'\n\nconst compAI = (playerBoard,playerShips,lastTurn,updateLastTurn) => {\n    const turn = lastTurn\n    const mode = turn.mode\n    console.log(mode)\n\n    const gameboard = playerBoard.gameboard\n    const gameLogic = GameLogic()\n    const directionArray = [\"up\",\"down\",\"left\",\"right\"]\n    const rand = (max) => {return Math.floor(Math.random() * Math.floor(max))}\n    let x\n    let y\n    let orientation\n    let direction \n    \n    if(mode === \"random\"){\n        x = rand(gameboard.length)\n        y = rand(gameboard[x].length)\n    \n        while(gameboard[x][y][0] === \"miss\" || gameboard[x][y][0] === \"hit\"){\n            x = rand(gameboard.length)\n            y = rand(gameboard[x].length)\n        }\n    } else if(mode === \"seeking\"){\n        if(turn.lastResult === \"init\"){\n            setRandDirection()\n        } else {\n            orientation = turn.orientation\n            direction = turn.direction\n        }\n    }\n\n    const cell = gameLogic.getCell(x,y)\n    const checkForHit = playerBoard.checkHit(x,y)\n    const clickResult = gameLogic.displayCellClickResult(cell,checkForHit,playerShips)\n    \n    if(checkForHit[0]){\n        if(turn.hasOwnProperty(\"lastResult\")){\n            turn.lastResult = \"init\"\n            console.log(turn.lastResult)\n        } else {\n            turn.lastResult = checkForHit[0].toString()\n            console.log(turn.lastResult)\n        }\n    } else {\n        turn.lastResult = checkForHit[0].toString()\n        console.log(turn.lastResult)\n    }\n\n    function setRandDirection(){\n        direction = directionArray[rand(3)]\n        if(direction === \"up\" || direction === \"down\"){\n            orientation = \"vertical\"\n        } else if(direction === \"left\" || direction === \"right\"){\n            orientation = \"horizontal\"\n        }\n    }\n\n    return clickResult\n}\n\nexport default compAI",{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":1,"column":16,"nodeType":"94","messageId":"95","endLine":1,"endColumn":24},{"ruleId":"92","severity":1,"message":"96","line":1,"column":26,"nodeType":"94","messageId":"95","endLine":1,"endColumn":35},{"ruleId":"92","severity":1,"message":"97","line":16,"column":21,"nodeType":"94","messageId":"95","endLine":16,"endColumn":32},{"ruleId":"92","severity":1,"message":"98","line":57,"column":13,"nodeType":"94","messageId":"95","endLine":57,"endColumn":24},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'setCompName' is assigned a value but never used.","'orientation' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]